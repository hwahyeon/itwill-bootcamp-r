x*2
x <- as.numerical(x)
x <- as.numeric(x)
x*2
x**2
plot(x)
gender <- c('남', '여', '남', '여', '여')
mode(gender)
#문자형 -> 요인형 변환
fgender <- as.factor(gender)
mode(fgender)
plot(fgender)
fgender
str(fgender)
#mode vs class
mode(fgender)
class(fgender) #factor -> 자료구조 확인
x <- c(4,2,4,2)
mode(x)
#숫자형 -> 요인형
f <- as.factor(x)
f
# 요인형 -> 숫자형
x2 <- as.numeric(f)
x2
#요인형 -> 문자형
c <- as.character(f)
#문자형 -> 숫자형
x2 <- as.numeric(c)
x2
getOption("max.print")
install.packages('stringr')
library(help='stringr')
#현재 memory에 로딩된 패키지 목록
search()
Nile
a <- 1:50
a
a[10]
a[10:20]
a[10:20, 30:35]
a[c(10:20, 30:35)]
a[10:length(a)-5] #10~45
a[seq(2, length(a), by=2)]
#특정 원소 제외(-)
a[-c(15, 25, 30:35)]
#조건식 (boolean)
a[a>=10 & a<=30]
a[a>=10 | a<=30]  # |(or)
#1) Vec1 벡터 변수를 만들고, 1~5까지 연속된 정수를 만드시오.
vec1 = [1:5]
# 02. 다음 두 개의 벡터를 이용하여 단계별로 처리하시오.
v1 <- c(2,3,10,-5,8)
#1) Vec1 벡터 변수를 만들고, 1~5까지 연속된 정수를 만드시오.
vec1 = [1:5]
#1) Vec1 벡터 변수를 만들고, 1~5까지 연속된 정수를 만드시오.
vec1 = c(1:5)
#2) Vec2 벡터 변수에 1~10까지 3간격으로 연속된 정수를 만드시오.
vec1 = c(1, 10, 3)
#1) Vec1 벡터 변수를 만들고, 1~5까지 연속된 정수를 만드시오.
vec1 = c(1:5)
#2) Vec2 벡터 변수에 1~10까지 3간격으로 연속된 정수를 만드시오.
vec2 = c(1, 10, 3)
vec2
vec1
#2) Vec2 벡터 변수에 1~10까지 3간격으로 연속된 정수를 만드시오.
vec2 = seq(1, 10, by 3)
vec1
#2) Vec2 벡터 변수에 1~10까지 3간격으로 연속된 정수를 만드시오.
vec2 <- seq(1, 10, by=3)
vec2
#3) Vec3 벡터 변수에 "R" 문자가 5회 반복되도록 하시오.
vec3 <- rep(R, times=5)
#3) Vec3 벡터 변수에 "R" 문자가 5회 반복되도록 하시오.
vec3 <- rep('R', times=5)
vec3
#4) Vec4에는 Vec1~Vec2가 모두 포함되는 벡터를 만드시오.
vec4 <- vec1 & vec2
#4) Vec4에는 Vec1~Vec2가 모두 포함되는 벡터를 만드시오.
vec4 <- vec1 + vec2
#4) Vec4에는 Vec1~Vec2가 모두 포함되는 벡터를 만드시오.
vec4 <- [vec1 + vec2]
#4) Vec4에는 Vec1~Vec2가 모두 포함되는 벡터를 만드시오.
vec4 <- a[vec1 & vec2]
#4) Vec4에는 Vec1~Vec2가 모두 포함되는 벡터를 만드시오.
vec4 <- [vec1 & vec2]
#4) Vec4에는 Vec1~Vec2가 모두 포함되는 벡터를 만드시오.
vec4 <- a[(vec1) & (vec2)].
#5) 25~ -15까지 5간격으로 벡터 생성- seq()함수 이용
vec <- seq(25, -15, by=5)
vec
#5) 25~ -15까지 5간격으로 벡터 생성- seq()함수 이용
vec <- seq(25, -15, by=5)
#5) 25~ -15까지 5간격으로 벡터 생성- seq()함수 이용
vec <- seq(-15, 25, by=5)
vec
#4) Vec4에는 Vec1~Vec2가 모두 포함되는 벡터를 만드시오.
vec4 <- a[vec1 | vec2]
#4) Vec4에는 Vec1~Vec2가 모두 포함되는 벡터를 만드시오.
vec4 <- a(vec1 | vec2)
#4) Vec4에는 Vec1~Vec2가 모두 포함되는 벡터를 만드시오.
vec4 <- c(vec1 | vec2)
#4) Vec4에는 Vec1~Vec2가 모두 포함되는 벡터를 만드시오.
vec4 <- vec1 + vec2
#4) Vec4에는 Vec1~Vec2가 모두 포함되는 벡터를 만드시오.
vec4 <- [vec1 + vec2]
#4) Vec4에는 Vec1~Vec2가 모두 포함되는 벡터를 만드시오.
vec4 <- c(vec1) + c(vec2)
#4) Vec4에는 Vec1~Vec2가 모두 포함되는 벡터를 만드시오.
vec4 <- c(1:5) + seq(1, 10, by=3)
#4) Vec4에는 Vec1~Vec2가 모두 포함되는 벡터를 만드시오.
vec4 <- c(1:5) | seq(1, 10, by=3)
#4) Vec4에는 Vec1~Vec2가 모두 포함되는 벡터를 만드시오.
vec4 <- a[c(1:5) | seq(1, 10, by=3)]
#1) Vec1 벡터 변수를 만들고, 1~5까지 연속된 정수를 만드시오.
vec1 <- c(1:5)
vec1
#2) Vec2 벡터 변수에 1~10까지 3간격으로 연속된 정수를 만드시오.
vec2 <- seq(1, 10, by=3)
vec2
#3) Vec3 벡터 변수에 "R" 문자가 5회 반복되도록 하시오.
vec3 <- rep('R', times=5)
vec3
#4) Vec4에는 Vec1~Vec2가 모두 포함되는 벡터를 만드시오.
vec4 <- c(vec1, vec2)
vec4
#5) 25~ -15까지 5간격으로 벡터 생성- seq()함수 이용
seq(-15, 25, by=5)
#6) Vec4에서 홀수번째 값들만 선택하여 Vec5에 할당하시오.(첨자 이용)
vec5 <- seq(vec4[1], vec4[-1], by=2)
#6) Vec4에서 홀수번째 값들만 선택하여 Vec5에 할당하시오.(첨자 이용)
vec5 <- seq(vec4[1], vec4[-1], by=3)
#6) Vec4에서 홀수번째 값들만 선택하여 Vec5에 할당하시오.(첨자 이용)
vec5 <- c(vec4[1], vec4[-1])
vec5
#6) Vec4에서 홀수번째 값들만 선택하여 Vec5에 할당하시오.(첨자 이용)
vec5 <- vec4[seq(1, length(vec4), 2)]
vec5
# 02. 다음 두 개의 벡터를 이용하여 단계별로 처리하시오.
v1 <- c(2,3,10,-5,8)
length(vec4)
vec5
r = 4 mod 2
4 mod 2
vec5 <- vec4[seq(1, length(vec4), 3)]
vec5
#6) Vec4에서 홀수번째 값들만 선택하여 Vec5에 할당하시오.(첨자 이용)
vec5 <- vec4[seq(1, length(vec4), 2)]
vec5
a[!(a>=10)] # !(not)
a[10:length(a)-5] #5-45
a[10:(length(a)-5)] #10~45
# (1) matrix
m1 <- matrix(data=c(1:5)) #1에서 5까지 매트릭스를 만들겠다는 의미.
m1
dim(m1) # 5 1
mode(m1)
class(m1)
m2 <- matrix(data = c(1:9), nrow = 3, ncol = 3)
m2
m2 <- matrix(data = c(1:9), nrow = 3, ncol = 3, byrow = TRUE)
m2
dim(m2) #3x3
# (2) rbind
x <- 1:5
y <- 6:10
x
y
m3 <- rbind(x,y)
m3
dim(m3)
#(3) cbind()
m4 <- cbind(x,y)
m4
dim(m4)
#ADsP 문제
xy <- rbind(x,y)
# [행,컬럼]의 구조
# 행자리가 비어있다면 전체 행을 의미하며, 컬럼 자리가 비어있다면 전체 칼럼을 의미함.
# 즉, xy[1,]은 x와 같으며, xy[,1]의 구조는 y와 같다.
xy[1,]
xy[,1]
m5 <- matrix(data = c(1:9), nrow=3, ncol=3)
m5
#특정 행/열 색인
m5[1,] #열 생략하면 열전체가 나옴
m5[,1]
#어떤 박스 형태만 출력하려면 예를 들어 2,2에서 3,2까지 하려면
m5[2:3, 1:2]
m5[2:3] #2행 3열
m5[2,3] #2행 3열
m5[1, 2:3]
# - 속성
m5[-2,]
m5[,-3]
m5[,-c(1,3)]
#열(칼럼=변수=변인) 이름 지정
colnames(m5) <- c("one", "two", "three")
m5
m5[,'one']
m5[,'one':'two'] #error 열이름으로 :을 사용할 수는 없다.
m5[,1:2]
x <- matrix(1:12, nrow = 4, ncol = 3, bynow = T)
x <- matrix(1:12, nrow = 4, ncol = 3, byrow = T)
dim(x) #4 3
x
# 1) scala(0) vs matrix(2)
0.5 * x
#2) vactor(1) vs matrix(2)
y <- 10:12
y
y + x
#3) 동일한 모양(shape)
x + x
x - x
#4) 전치행렬 : 행->열, 열->행
t
#4) 전치행렬 : 행->열, 열->행
x
t(x)
# 처리 함수 : apply()
help(apply)
# apply(x, MARGIN(1/2), FUN, ...)
x
apply(x, 1, sum) # 행 단위 합계
apply(x, 2, mean) # 열 단위 평균
apply(x, 1, var) # 행 단위 분산
apply(x, 1, sd)
# 02. 다음 두 개의 벡터를 이용하여 단계별로 처리하시오.
v1 <- c(2,3,10,-5,8)
v2 <- c(40,50,-30,7,10)
# 단계1> 행 단위로 묶어서 matrix 생성하기
ms1 <- rbind(v1,v2)
ms1
dim(ms1)
# 단계3> matrix 열 단위 합계 계산하기
apply(ms1, 1, sum) # 행 단위 합계
# 단계3> matrix 열 단위 합계 계산하기
apply(ms1, 2, sum) # 행 단위 합계
#2) vactor(1) vs matrix(2)
y <- 10:12
y
y + x
x
y
#1차원데이터를 3차원으로 만들기
arr <- array(data=c(1:12), dim=c(3,2,2)) #3x2를 2개 더 붙이겠다는 뜻
arr
dim(arr)
data()
data("iris3")
iris3
dim(iris3) #
50*4*3
arr[,,1] #1면
# array에 대한, 3차원에 대한 색인(index)
#arr[r,c,s]
arr[,,1] #1면
arr[,,2] #2면
iris3[,,1] #첫번째 꽃의 종류
iris3[10:20,1:2,1] #꽃의 종 1
#2) vactor(1) vs matrix(2)
y <- 10:12
y
x
y + x
x <- matrix(0,nrow=4,ncol=3)
x
y+x
y
x1 <- matrix(1,nrow=4,ncol=3)
x1
x1*y
x
x <- matrix(1:12, nrow = 4, ncol = 3, byrow = T)
x
apply(x, 1, sum) # 행 단위 합계
apply(x, 1, var) # 행 단위 분산
var(1,2,3)
apply(x, 1, var) # 행 단위 분산
var(1,2,3)
apply(x, 1, sd) # 행 단위 표준편차
# 1) vector 이용
no <- 1:3
name <- c("홍길동", "이순신", "유관순")
pay c(250, 350, 200)
pay = c(250, 350, 200)
emp <- data.frame(NO=no, NAME = name, PAY = pay)
emp
dim(emp)
class(emp)
mode(emp)
# 자료 참조 : 컬럼 참조 or index 참조
# 형식) object$칼럼
emp$PAY
# 자료 참조 : 컬럼 참조 or index 참조
# 형식) object$칼럼
PAY <- emp$PAY
# 자료 참조 : 컬럼 참조 or index 참조
# 형식) object$칼럼
pay <- emp$PAY
mean(pay)
# 형식) object[row,column]
emp_row <- emp[c(1,3),] # emp[-2,]
emp_row
# 2) csb, text file, db table
setwd("c:/ITWILL/Rwork/Part-I")
# 2) csb, text file, db table
setwd("c:/ITWILL/R_work/Part-I")
# 2) csb, text file, db table
setwd("C:\ITWILL\2_Rwork\Part-I")
# 2) csb, text file, db table
setwd("C:\ITWILL\2_Rwork\Part-I")
# 2) csb, text file, db table
setwd("c:\ITWILL\2_Rwork\Part-I")
# 2) csb, text file, db table
setwd("C:\ITWILL\2_Rwork\Part-I")
# 2) csb, text file, db table
setwd("C:\iTWILL\2_Rwork\Part-I")
getwd
getwd()
setwd("C:\ITWILL\2_Rwork\Part-I")
# 2) csb, text file, db table
setwd("C:\ITWILL\2_Rwork\Part-I")
emp_txt <- read.table("emp_txt", header = T, sep = "")
# 2) csb, text file, db table
setwd("C:")
# 2) csb, text file, db table
setwd("C:\itwill")
# 2) csb, text file, db table
setwd("C:\ITWILL\2_Rwork\Part-I")
# 2) csb, text file, db table
setwd("C:\ITWILL\2_Rwork\Part-I")
# 2) csb, text file, db table
setwd("C:\ITWILL\2_Rwork\Part-I")
#[실습]
sid <- 1:3 #이산형 변수
score <- c(90, 85, 83) #연속형
gender <- c('M', 'F', 'M') #범주형
student <- data.frame(SID=sid, Score = score, Gender = gender)
student
#자료구조 보기
str(student)
student <- data.frame(SID=sid, Score = score, Gender = gender, stringsAsFactors = F)
student
#내부의 자료구조 보기
str(student) # 문자형이 data.frame으로 들어오면 DF(요인형)으로 바뀐다.
#특정 컬럼 -> vector
score <- student$Score
mean(score)
sum(score)
sd(score)
var(score)
sqrt(var(score))
sd(score)
vec03 <- data.frame(Name = name, Age = age, Gender = gender, Job = job, Sat = sat, Grade = grade, Total = total)
name <-c("최민수","유관순", "이순신","김유신","홍길동")
age <-c(55,45,45,53,15) #연령
gender <-c(1,2,1,1,1) #1:남자, 2: 여자
job <-c("연예인","주부","군인","직장인","학생")
sat <-c(3,4,2,5,5) # 만족도
grade <- c("C","C","A","D","A")
total <-c(44.4,28.5,43.5,NA,27.1) #총구매금액(NA:결측치)
vec03 <- data.frame(Name = name, Age = age, Gender = gender, Job = job, Sat = sat, Grade = grade, Total = total)
hist(vec03)
hist(total)
# 2) csb, text file, db table
setwd("C:\ITWILL\2_Rwork\Part-I")
# 2) csb, text file, db table
setwd("C:\\ITWILL\\2_Rwork/Part-I")
plot(sat)
kor <- c(90,85,90)
eng <- c(70,85,75)
mat <- c(86,92,88)
# 조건1) 3개의 과목점수를 이용하여 데이터프레임(Data)을 생성한다.
three <- data.frame(Kor = kor, Eng = eng, Mat = mat)
# 조건2) 행/열 방향으로 max()함수를 적용하여 최댓값 구하기
max(three)
# 조건1) 3개의 과목점수를 이용하여 데이터프레임(Data)을 생성한다.
Data <- data.frame(kor, eng, mat)
# 조건2) 행/열 방향으로 max()함수를 적용하여 최댓값 구하기
apply(Data, 1, max)
apply(Data, 2, max)
vec03 <- data.frame(name, age, gender, job, sat, grade, total)
vec03
hist(total)
# <조건2> 총구매금액(total) 변수를 이용하여 히스토그램 그리기-hist()
total <- vec03$total
hist(total)
# <조건3> 만족도(sat) 변수를 이용하여 산점도 그리기-plot()
sat <- vec03$sat
plot(sat)
Data
apply(Data, 1, var)
apply(Data, 1, sd)
#1) key 생략 : [key1=value, key2=value]
lst <- list('lee','이순신',35,'hong', '홍길동', 30)
lst
lst[1]
lest[6]
lst[6]
lst[[5]]
# 2) key = value
lst2 <- list(frist = 1:5, second = 6:10)
source('C:/ITWILL/2_Rwork/R-script/chap02_Datastructure.R', encoding = 'UTF-8', echo=TRUE)
lst2
# key -> value 참조
lst$first
# key -> value 참조
lst$frist
# key -> value 참조
lst2$frist
lst2$second
# 2) key = value
lst2 <- list(first = 1:5, second = 6:10)
# key -> value 참조
lst2$frist
# 2) key = value
lst2 <- list(first = 1:5, second = 6:10)
lst2
# key -> value 참조
lst2$first
lst2$first[3]
lst2$second[2:4]
# 3) 다양한 자료형
lst3 <- list(name=c("홍길동","유관순"),age=c(35,25),gender=c('M','F'))
lst3
mean(lst3$age)
# 4) 다양한 자료구조(vector, matrix, array)
lst4 <- list(one = c('one', 'two', 'three'), two = matrix(1:9, nrow=3),
three = array(1:12, c(2,3,2)))
lst4
multi_list <- list(r1 = list(1,2,3),
r2 = list(10,20,30)
r3 = list(100,200,300))
# 5) list 형변환
multi_list <- list(r1 = list(1,2,3),
r2 = list(10,20,30),
r3 = list(100,200,300))
multi_list
# do.call(func, object)
mat <- do.call(rbind, multi_list)
mat
# apply(x, MARGIN(1/2), FUN, ...)
x
x
x <- matrix(1:12, nrow = 4, ncol = 3, byrow = T)
# apply(x, MARGIN(1/2), FUN, ...)
x
var(1:3)
var(1:5)
# 6) list 처리 함수
x <- list(1:10) # key 생략 -> [[n]]
x
#list -> vector
v <- unlist(x)
v
a <- list(1:5)
b <- list(6:10)
a
b
a;b
#lapply(x, function)
lapply(c(a,b), max)
sapply(c(a,b), max) #vector로 반환
avg <- mean(score)
diff <- (score - avg)^2
Var1= sum(diff) / length(score)
Var2= sum(diff) / length(score) -1
Var1;Var2
x <- 1:5
y <- 6:10
z <- letters
z <- letters[1:5]
letters
df <- data.frame(x, y, z)
df
help(subset)
help("subset")
# 1) 조건식으로 subset 생성
df2 <- subset(df, x >= 2)
df2
# 2) select로 subset 생성
df3 <- subset(df, select = c(x,z))
df3
# 3) 조건식 & select
df4 <- subset(df, x>2 & x<=4, select = c(x,z))
df4
# 3) 조건식 & select
df4 <- subset(df, x>=2 & x<=4, select = c(x,z))
df4
#df2, df3, df4 모두 데이터 프레임이다.
class(df2)
class(df3)
calss(df4)
class(df4)
df
#4) 특정 칼럼의 특정 값으로 subset 생성
subset(df, z %in% c('a', 'c', 'e'))
#4) 특정 칼럼의 특정 값으로 subset 생성
df5 <- subset(df, z %in% c('a', 'c', 'e'))
#z라는 칼럼 중에 a, c, e라는 문자가 포함된 것을 서브셋으로 만든다.
# %in% 연산자
df5
x <- matrix(1:12, nrow = 4, ncol = 3, byrow = T)
x
apply(x, 1, var) # 행 단위 분산
avg <- mean(x)
diff <- (x-avg)^2
Var1= sum(diff) / length(x)
Var2= sum(diff) / length(x) -1
Var1;Var2
